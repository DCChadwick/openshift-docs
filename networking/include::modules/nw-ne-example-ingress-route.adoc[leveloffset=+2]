// Module included in the following assemblies:
//
// * networking/understanding-networking.adoc

[id="nw-ne-openshift-example-ingress-route_{context}"]
= Example: Configuring routes and ingress to expose a web application
Imagine you have a web application running in your OpenShift cluster, and you want to make it accessible to external users. The application should be accessible via a specific domain name, and the traffic should be securely encrypted using TLS. The following example shows you how to configure both Routes and Ingress to expose your web application to external traffic securely. Routes offer a straightforward way to expose applications in OpenShift, while Ingress provides more advanced routing and TLS termination features.

Configuring Routes

1. Create a New Project:
   [source, terminal]
   oc new-project webapp-project

2. Deploy the Web Application:
   [source, terminal]
   oc new-app nodejs:12~https://github.com/sclorg/nodejs-ex.git --name=webapp

3. Expose the Service with a Route:
   [source, terminal]
   oc expose svc/webapp --hostname=webapp.example.com

4. Secure the Route with TLS:

   Create a TLS secret with your certificate and key:
   [source, terminal]
   oc create secret tls webapp-tls --cert=path/to/tls.crt --key=path/to/tls.key

   Update the route to use the TLS secret:
   [source, terminal]
   oc patch route/webapp -p '{"spec":{"tls":{"termination":"edge","certificate":"path/to/tls.crt","key":"path/to/tls.key"}}}'

Configuring ingress

1. Create an Ingress Resource:

   First, ensure your Ingress Controller (e.g., NGINX) is installed and running in the cluster.

2. Create a Service for the Web Application:

   If not already created, expose the application as a service:
   [source, yaml]
   apiVersion: v1
   kind: Service
   metadata:
     name: webapp-service
     namespace: webapp-project
   spec:
     selector:
       app: webapp
     ports:
       - protocol: TCP
         port: 80
         targetPort: 8080

3. Create the Ingress Resource:

   [source, yaml]
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     name: webapp-ingress
     namespace: webapp-project
     annotations:
       kubernetes.io/ingress.class: "nginx"
   spec:
     rules:
       - host: webapp.example.com
         http:
           paths:
             - path: /
               pathType: Prefix
               backend:
                 service:
                   name: webapp-service
                   port:
                     number: 80

4. Secure the Ingress with TLS:

   Create a TLS secret with your certificate and key:
   [source, terminal]
   oc create secret tls webapp-tls --cert=path/to/tls.crt --key=path/to/tls.key -n webapp-project

   Update the Ingress resource to use the TLS secret:
   [source, yaml]
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     name: webapp-ingress
     namespace: webapp-project
   spec:
     tls:
       - hosts:
           - webapp.example.com
         secretName: webapp-tls
     rules:
       - host: webapp.example.com
         http:
           paths:
             - path: /
               pathType: Prefix
               backend:
                 service:
                   name: webapp-service
                   port:
                     number: 80
