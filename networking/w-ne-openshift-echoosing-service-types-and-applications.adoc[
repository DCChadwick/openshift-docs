// Module included in the following assemblies:
//
// * networking/understanding-networking.adoc

[id="nw-ne-openshift-securing-connections_{context}"]
= Choosing between service types and API resources
There are distinct benefits to using different service types and API resources for exposing applications and securing network connections in Kubernetes. By leveraging the appropriate service type or API resource, you can effectively manage how your applications are exposed and ensure secure, reliable access for both internal and external clients.

Service Types
* ClusterIP:
** Benefits: Internal-only exposure, easy to set up, and provides a stable internal IP address for accessing services within the cluster.
** Use Case: Suitable for communication between services within the cluster.
* NodePort:
** Benefits: Exposes the service on each node's IP at a static port, allowing external access. It's straightforward to set up and useful for development and testing.
** Use Case: Good for simple external access without the need for a cloud provider's load balancer.
* LoadBalancer:
** Benefits: Automatically provisions an external load balancer (in cloud environments), distributing traffic across multiple nodes and providing high availability.
** Use Case: Ideal for production environments where reliable, high-availability access is needed.

API Resources
* Ingress:
** Benefits: Provides fine-grained control over routing HTTP and HTTPS traffic, including support for load balancing, SSL termination, and name-based virtual hosting. It's more flexible than services alone and supports multiple domains and paths.
** Use Case: Suitable for complex routing requirements, like web applications that need to route different paths or domains to specific services.
* Route (specific to OpenShift):
** Benefits: Similar to Ingress but provides additional features like TLS re-encryption and passthrough. It simplifies the process of exposing services externally.
** Use Case: Best for scenarios where you need the advanced features provided by OpenShift Routes, such as integrated certificate management.

If you need a straightforward way to expose a service to external traffic, `NodePort` or `LoadBalancer` might be the best choice. For more complex scenarios involving multiple services, paths, or domains, `Ingress` or `Routes` offer greater flexibility and control. `LoadBalancer` services provide built-in load balancing and are well-suited for production environments that require robust traffic management.